name: Soylent Red Division Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-timeout
        pip install -e .

    - name: Create test directories
      run: |
        mkdir -p test_artifacts
        mkdir -p coverage_reports

    - name: Run unit tests
      run: |
        pytest tests/test_memory_manager.py tests/test_knowledge_manager.py tests/test_reasoning_engine.py tests/test_validation_engine.py -v --tb=short --markers="unit"
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short --markers="integration"
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Run crew and tools tests
      run: |
        pytest tests/test_crew_and_tools.py -v --tb=short --markers="crew or tools"
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Run end-to-end tests
      run: |
        pytest tests/test_end_to_end.py -v --tb=short --markers="e2e"
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Run all tests with coverage
      run: |
        pytest --cov=src/soylent_red_division --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          test_artifacts/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check src tests

    - name: Check import sorting with isort
      run: |
        isort --check-only src tests

    - name: Type checking with mypy
      run: |
        mypy src --ignore-missing-imports --no-strict-optional

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark
        pip install -e .

    - name: Run performance tests
      run: |
        pytest tests/ -k "performance" --benchmark-only --benchmark-json=benchmark.json
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json