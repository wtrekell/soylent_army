github_extraction_task:
  description: >
    Extract the CSS, SCSS, and styling source code from the Cloudscape Design System GitHub repositories.
    
    Target repositories to extract from:
    1. cloudscape-design/components - Main component styling
    2. cloudscape-design/global-styles - Global design tokens and themes
    3. cloudscape-design/board-components - Specialized board components
    4. cloudscape-design/chart-components - Chart-specific styling
    
    Focus on extracting:
    - All .css, .scss, and .sass files
    - Particularly target src-themeable and style-dictionary directories
    - Global styling and theme files
    - Component-specific styling
    
    Use the GitHub Source Extractor tool to download the actual source files, not just documentation.
    Organize extracted files in a logical directory structure for analysis.
  expected_output: >
    A comprehensive extraction report detailing:
    - Number of files extracted from each repository
    - Directory structure of extracted styling files
    - Key directories and file types found
    - Summary of styling architecture discovered
    - Locations of extracted files for further analysis
    Formatted as markdown with clear organization
  agent: design_system_analyst

pattern_analysis_task:
  description: >
    Analyze the extracted CSS/SCSS files to identify and document all design patterns, variables, and styling architectures.
    
    Use the extracted files from the previous task to:
    1. Analyze component CSS files using the Component CSS Analyzer tool
    2. Extract design patterns using the Design Pattern Extractor tool
    3. Identify color schemes, typography patterns, spacing systems
    4. Document CSS variables and design tokens
    5. Map component relationships and dependencies
    6. Identify opportunities for reskinning and customization
    
    Focus on understanding:
    - How the original design system is structured
    - What visual patterns are consistently used
    - How theming and variations are implemented
    - What styling conventions and standards exist
  expected_output: >
    A detailed design pattern analysis including:
    - Complete inventory of design tokens (colors, typography, spacing)
    - Documentation of component styling patterns
    - CSS architecture and organization analysis
    - Identification of themeable elements and customization points
    - Visual hierarchy and styling conventions
    - Recommendations for pattern extraction and reuse
    Formatted as structured markdown with examples
  agent: css_pattern_expert

visual_reference_task:
  description: >
    Create a comprehensive visual reference system from the analyzed design patterns and extracted components.
    
    Using the analysis from previous tasks:
    1. Generate visual reference documentation using the Visual Reference Generator tool
    2. Create an organized, browsable component library reference
    3. Document color palettes, typography scales, and spacing systems
    4. Build style guides that show component variations and states
    5. Create both HTML and markdown versions for different use cases
    6. Organize everything into a logical, easy-to-navigate structure
    
    The goal is to create a practical reference that makes it easy to:
    - Understand how each component is styled
    - See all available design tokens and variables
    - Browse component variations and states
    - Reference styling patterns for new component development
  expected_output: >
    A complete visual reference system including:
    - Interactive HTML component reference guide
    - Markdown documentation of all patterns and tokens
    - Organized style guide with visual examples
    - Component catalog with styling details
    - Design token reference (colors, typography, spacing)
    - Usage guidelines and implementation notes
    Saved as browsable HTML and markdown files
  agent: visual_reference_creator

reskinning_strategy_task:
  description: >
    Develop comprehensive strategies for reskinning the Cloudscape Design System and creating new component variations.
    
    Based on all previous analysis:
    1. Identify the most effective points for customization and theming
    2. Create strategies for maintaining design consistency while introducing variations
    3. Document approaches for creating new color schemes and visual themes
    4. Develop guidelines for component variation and extension
    5. Create templates and patterns for new component development
    6. Provide specific recommendations for implementing design changes
    
    Focus on practical strategies that:
    - Leverage existing design tokens and variables
    - Maintain accessibility and usability standards
    - Allow for efficient development of new variations
    - Preserve the core design system architecture
    - Enable easy maintenance and updates
  expected_output: >
    A strategic reskinning guide containing:
    - Comprehensive customization strategy and implementation plan
    - Detailed theming guidelines and best practices
    - Component variation templates and examples
    - Color scheme and visual theme development guides
    - Implementation roadmap for design system modifications
    - Maintenance and evolution strategies
    - Practical next steps and recommended tools
    Formatted as an actionable strategy document
  agent: reskinning_strategist
